
int const N = 1e6+5;
int const MOD = 1e9+7;


// a power b where answer is so big = (a power b%(mod-1)) %mod
ll mult(ll a, ll b) {
    return ((a% MOD) * (b% MOD)) % MOD;
}



ll add(ll a, ll b) {
    return ((a% MOD) + (b % MOD)) % MOD;
}



ll sub(ll a, ll b) {
    return ((a % MOD - b % MOD + MOD) % MOD);
}



ll fastPower(ll a, ll b){ // log(b)
    ll ans = 1;
    while (b != 0){
        if (b%2 == 1){
            ans = mult(ans, a);
        }
        a = mult(a, a);
        b /= 2;
    }
    return ans;
}




ll divMod(ll a, ll b){
    // MOD must be prime
    return mult(a, fastPower(b, MOD-2));
}




//Linear Sieve O(n)
void linear_sieve(int n) {
    bool composite[n];
    vector<int> primes;
    fill(composite, composite + n, false);
    composite[0] = composite[1] = true;

    for (int i = 2; i < n; i++) {
        if (!composite[i]) primes.push_back(i);
        for (int j = 0; j < primes.size() && i * primes[j] < n; ++j) {
            composite[i * primes[j]] = true;
            if (i % primes[j] == 0) break;
        }
    }
}




vector<bool> primes(N, true);
void sieve(){ // O(Nlog(log(N)))
    primes[1] = primes[0] = false;
    for (ll i = 2; i < N; ++i) {
        if (primes[i]){
            for (ll j = i*i; j < N; j+=i) {
                primes[j] = false;
            }
        }
    }
}



bool isPrime(int n){
    for (int i = 2 ; i * i <= n ; i++) {
        if (n %i == 0)
            return false;
    }
    return n > 1;
}




ll GCD(ll a, ll b){ // log(min(a,b)
    if (b == 0)
        return a;
    return GCD(b, a%b);
}




ll LCM(int a, int b){
    return (a / gcd(a, b)) * b;
}




int spf[N];
void preSpf () {
    for (int i = 1; i < N; ++i) {
        spf[i] = i;
    }
    for (int i = 2; i*i < N; ++i) {
        if (spf[i] == i) {
            for (int j = i*i; j < N; j += i) {
                if (spf[j] == j)
                    spf[j] = i;
            }
        }
    }
}



map<int, int> primeFac(int n) {
    map<int, int> res;
    while (n > 1) {
        res[spf[n]]++;
        n /= spf[n];
    }
    return res;
}



int fac[N], inv[N];
void factorials() {
    fac[0] = 1;
    for (int i = 1; i < N; i++) {
        fac[i] = mult (fac[i-1], i);
    }
    inv[0] = 1;
    for (int i = 1; i < N; i++) {
        inv[i] = fastPower(fac[i], MOD - 2);
    }
}


 
ll nCr(int n, int r, int p = MOD) {
    if (r == n || r == 0)
        return 1;
    if (r > n || r < 0)
        return 0;
    return mult(fac[n], mult(inv[n-r], inv[r]));
}


const int sz = 1e6+1;
vector<ll>v(sz);
void precomputedivisors(){ // nlogn
    for (int i = 1; i < sz; ++i) {
        ll tmp = 1;
        while(i*tmp <= 1e6){
            v[i*tmp]++;
            tmp++;
        }
    }
}

vector<pair<ll,ll>> prime_factors_of_a_number(ll n){
    ll ans = 0;// number of prime divisors
    vector<pair<ll,ll>>ret;
    for(ll i = 2 ; i*i<=n ;i++){
        if(n%i==0){
            ll c = 0;
            while(n%i==0){
                n/=i;c++;
            }
            ret.emplace_back(i,c);
            ans+=c;
        }
    }
    if(n>1)ret.emplace_back(n,1),ans++;
    return ret;
}

// bezout identity : if i have sum numbers a,b and i multiplied each by a number like this:  (a*x + b*y) then its equal k*gcd(a,b) -> a multiple of the gcd(a,b) where k>=1
// number of integers divisble by x,y in range 1->n  =  n/x + n/y - n/lcm(x,y)

// gcd(x+k,y+k) = gcd(x+k,y-x)
// (x+k)%p = 0 , k = (p-x%p)%p
// Every even number â‰¥ 4 is a sum of two prime numbers.
